1.

class Solution {
public:
    int majorityElement(vector<int>& n) {
        int d = n.size() / 2;
        unordered_map  <int , int > mp;
       for(auto i : n)
           mp[i]++;
    
    int ans = 0;
    for(auto i : mp)
    {
        if(i.second > d)
        {
            ans = i.first;
            break;
        }
    }
    
        return ans;
    }
        
    
};


2.

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int counter = 0, majority;
        for (int num : nums) {
            if (!counter) {
                majority = num;
            }
            counter += num == majority ? 1 : -1;
        }
        return majority;
    }
};



3.


class Solution {
public:
    int majorityElement(vector<int>& n) {
        sort(n.begin(), n.end());
        return n[n.size() / 2];
     /*   int d = n.size() / 2;
        unordered_map  <int , int > mp;
       for(auto i : n)
           mp[i]++;
    
    int ans = 0;
    for(auto i : mp)
    {
        if(i.second > d)
        {
            ans = i.first;
            break;
        }
    }
    
        return ans;
    }
    */
    }
        
    
};